// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/store/store.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	binotto "github.com/smallcase/go-be-template/pkg/binotto"
)

// MockBinottoStore is a mock of BinottoStore interface.
type MockBinottoStore struct {
	ctrl     *gomock.Controller
	recorder *MockBinottoStoreMockRecorder
}

// MockBinottoStoreMockRecorder is the mock recorder for MockBinottoStore.
type MockBinottoStoreMockRecorder struct {
	mock *MockBinottoStore
}

// NewMockBinottoStore creates a new mock instance.
func NewMockBinottoStore(ctrl *gomock.Controller) *MockBinottoStore {
	mock := &MockBinottoStore{ctrl: ctrl}
	mock.recorder = &MockBinottoStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBinottoStore) EXPECT() *MockBinottoStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBinottoStore) Create(ctx context.Context, venue string) (*binotto.Binotto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, venue)
	ret0, _ := ret[0].(*binotto.Binotto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBinottoStoreMockRecorder) Create(ctx, venue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBinottoStore)(nil).Create), ctx, venue)
}

// GetById mocks base method.
func (m *MockBinottoStore) GetById(ctx context.Context, id string) (*binotto.Binotto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*binotto.Binotto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockBinottoStoreMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockBinottoStore)(nil).GetById), ctx, id)
}

// UpdateVenue mocks base method.
func (m *MockBinottoStore) UpdateVenue(ctx context.Context, id, venue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVenue", ctx, id, venue)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVenue indicates an expected call of UpdateVenue.
func (mr *MockBinottoStoreMockRecorder) UpdateVenue(ctx, id, venue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVenue", reflect.TypeOf((*MockBinottoStore)(nil).UpdateVenue), ctx, id, venue)
}
